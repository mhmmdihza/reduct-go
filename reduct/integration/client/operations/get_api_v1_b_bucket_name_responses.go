// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAPIV1BBucketNameReader is a Reader for the GetAPIV1BBucketName structure.
type GetAPIV1BBucketNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAPIV1BBucketNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAPIV1BBucketNameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetAPIV1BBucketNameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAPIV1BBucketNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v1/b/{bucket_name}] GetAPIV1BBucketName", response, response.Code())
	}
}

// NewGetAPIV1BBucketNameOK creates a GetAPIV1BBucketNameOK with default headers values
func NewGetAPIV1BBucketNameOK() *GetAPIV1BBucketNameOK {
	return &GetAPIV1BBucketNameOK{}
}

/*
GetAPIV1BBucketNameOK describes a response with status code 200, with default header values.

Information about the bucket in JSON format
*/
type GetAPIV1BBucketNameOK struct {
	Payload *GetAPIV1BBucketNameOKBody
}

// IsSuccess returns true when this get Api v1 b bucket name o k response has a 2xx status code
func (o *GetAPIV1BBucketNameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Api v1 b bucket name o k response has a 3xx status code
func (o *GetAPIV1BBucketNameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 b bucket name o k response has a 4xx status code
func (o *GetAPIV1BBucketNameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Api v1 b bucket name o k response has a 5xx status code
func (o *GetAPIV1BBucketNameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 b bucket name o k response a status code equal to that given
func (o *GetAPIV1BBucketNameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Api v1 b bucket name o k response
func (o *GetAPIV1BBucketNameOK) Code() int {
	return 200
}

func (o *GetAPIV1BBucketNameOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/b/{bucket_name}][%d] getApiV1BBucketNameOK %s", 200, payload)
}

func (o *GetAPIV1BBucketNameOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v1/b/{bucket_name}][%d] getApiV1BBucketNameOK %s", 200, payload)
}

func (o *GetAPIV1BBucketNameOK) GetPayload() *GetAPIV1BBucketNameOKBody {
	return o.Payload
}

func (o *GetAPIV1BBucketNameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAPIV1BBucketNameOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAPIV1BBucketNameUnauthorized creates a GetAPIV1BBucketNameUnauthorized with default headers values
func NewGetAPIV1BBucketNameUnauthorized() *GetAPIV1BBucketNameUnauthorized {
	return &GetAPIV1BBucketNameUnauthorized{}
}

/*
GetAPIV1BBucketNameUnauthorized describes a response with status code 401, with default header values.

Access token is invalid or empty
*/
type GetAPIV1BBucketNameUnauthorized struct {
}

// IsSuccess returns true when this get Api v1 b bucket name unauthorized response has a 2xx status code
func (o *GetAPIV1BBucketNameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 b bucket name unauthorized response has a 3xx status code
func (o *GetAPIV1BBucketNameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 b bucket name unauthorized response has a 4xx status code
func (o *GetAPIV1BBucketNameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api v1 b bucket name unauthorized response has a 5xx status code
func (o *GetAPIV1BBucketNameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 b bucket name unauthorized response a status code equal to that given
func (o *GetAPIV1BBucketNameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get Api v1 b bucket name unauthorized response
func (o *GetAPIV1BBucketNameUnauthorized) Code() int {
	return 401
}

func (o *GetAPIV1BBucketNameUnauthorized) Error() string {
	return fmt.Sprintf("[GET /api/v1/b/{bucket_name}][%d] getApiV1BBucketNameUnauthorized", 401)
}

func (o *GetAPIV1BBucketNameUnauthorized) String() string {
	return fmt.Sprintf("[GET /api/v1/b/{bucket_name}][%d] getApiV1BBucketNameUnauthorized", 401)
}

func (o *GetAPIV1BBucketNameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAPIV1BBucketNameNotFound creates a GetAPIV1BBucketNameNotFound with default headers values
func NewGetAPIV1BBucketNameNotFound() *GetAPIV1BBucketNameNotFound {
	return &GetAPIV1BBucketNameNotFound{}
}

/*
GetAPIV1BBucketNameNotFound describes a response with status code 404, with default header values.

The bucket does not exist
*/
type GetAPIV1BBucketNameNotFound struct {
}

// IsSuccess returns true when this get Api v1 b bucket name not found response has a 2xx status code
func (o *GetAPIV1BBucketNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get Api v1 b bucket name not found response has a 3xx status code
func (o *GetAPIV1BBucketNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Api v1 b bucket name not found response has a 4xx status code
func (o *GetAPIV1BBucketNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get Api v1 b bucket name not found response has a 5xx status code
func (o *GetAPIV1BBucketNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get Api v1 b bucket name not found response a status code equal to that given
func (o *GetAPIV1BBucketNameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get Api v1 b bucket name not found response
func (o *GetAPIV1BBucketNameNotFound) Code() int {
	return 404
}

func (o *GetAPIV1BBucketNameNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/b/{bucket_name}][%d] getApiV1BBucketNameNotFound", 404)
}

func (o *GetAPIV1BBucketNameNotFound) String() string {
	return fmt.Sprintf("[GET /api/v1/b/{bucket_name}][%d] getApiV1BBucketNameNotFound", 404)
}

func (o *GetAPIV1BBucketNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetAPIV1BBucketNameOKBody get API v1 b bucket name o k body
swagger:model GetAPIV1BBucketNameOKBody
*/
type GetAPIV1BBucketNameOKBody struct {

	// entries
	Entries []*GetAPIV1BBucketNameOKBodyEntriesItems0 `json:"entries"`

	// info
	Info *GetAPIV1BBucketNameOKBodyInfo `json:"info,omitempty"`

	// settings
	Settings *GetAPIV1BBucketNameOKBodySettings `json:"settings,omitempty"`
}

// Validate validates this get API v1 b bucket name o k body
func (o *GetAPIV1BBucketNameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIV1BBucketNameOKBody) validateEntries(formats strfmt.Registry) error {
	if swag.IsZero(o.Entries) { // not required
		return nil
	}

	for i := 0; i < len(o.Entries); i++ {
		if swag.IsZero(o.Entries[i]) { // not required
			continue
		}

		if o.Entries[i] != nil {
			if err := o.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiV1BBucketNameOK" + "." + "entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getApiV1BBucketNameOK" + "." + "entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAPIV1BBucketNameOKBody) validateInfo(formats strfmt.Registry) error {
	if swag.IsZero(o.Info) { // not required
		return nil
	}

	if o.Info != nil {
		if err := o.Info.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getApiV1BBucketNameOK" + "." + "info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getApiV1BBucketNameOK" + "." + "info")
			}
			return err
		}
	}

	return nil
}

func (o *GetAPIV1BBucketNameOKBody) validateSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.Settings) { // not required
		return nil
	}

	if o.Settings != nil {
		if err := o.Settings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getApiV1BBucketNameOK" + "." + "settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getApiV1BBucketNameOK" + "." + "settings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get API v1 b bucket name o k body based on the context it is used
func (o *GetAPIV1BBucketNameOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAPIV1BBucketNameOKBody) contextValidateEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Entries); i++ {

		if o.Entries[i] != nil {

			if swag.IsZero(o.Entries[i]) { // not required
				return nil
			}

			if err := o.Entries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getApiV1BBucketNameOK" + "." + "entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getApiV1BBucketNameOK" + "." + "entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetAPIV1BBucketNameOKBody) contextValidateInfo(ctx context.Context, formats strfmt.Registry) error {

	if o.Info != nil {

		if swag.IsZero(o.Info) { // not required
			return nil
		}

		if err := o.Info.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getApiV1BBucketNameOK" + "." + "info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getApiV1BBucketNameOK" + "." + "info")
			}
			return err
		}
	}

	return nil
}

func (o *GetAPIV1BBucketNameOKBody) contextValidateSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.Settings != nil {

		if swag.IsZero(o.Settings) { // not required
			return nil
		}

		if err := o.Settings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getApiV1BBucketNameOK" + "." + "settings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getApiV1BBucketNameOK" + "." + "settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBody) UnmarshalBinary(b []byte) error {
	var res GetAPIV1BBucketNameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIV1BBucketNameOKBodyEntriesItems0 get API v1 b bucket name o k body entries items0
swagger:model GetAPIV1BBucketNameOKBodyEntriesItems0
*/
type GetAPIV1BBucketNameOKBodyEntriesItems0 struct {

	// block count
	BlockCount int64 `json:"block_count,omitempty"`

	// latest record
	LatestRecord int64 `json:"latest_record,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// oldest record
	OldestRecord int64 `json:"oldest_record,omitempty"`

	// record count
	RecordCount int64 `json:"record_count,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this get API v1 b bucket name o k body entries items0
func (o *GetAPIV1BBucketNameOKBodyEntriesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get API v1 b bucket name o k body entries items0 based on context it is used
func (o *GetAPIV1BBucketNameOKBodyEntriesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBodyEntriesItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBodyEntriesItems0) UnmarshalBinary(b []byte) error {
	var res GetAPIV1BBucketNameOKBodyEntriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIV1BBucketNameOKBodyInfo get API v1 b bucket name o k body info
swagger:model GetAPIV1BBucketNameOKBodyInfo
*/
type GetAPIV1BBucketNameOKBodyInfo struct {

	// entry count
	EntryCount int64 `json:"entry_count,omitempty"`

	// is provisioned
	IsProvisioned bool `json:"is_provisioned,omitempty"`

	// latest record
	LatestRecord int64 `json:"latest_record,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// oldest record
	OldestRecord int64 `json:"oldest_record,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`
}

// Validate validates this get API v1 b bucket name o k body info
func (o *GetAPIV1BBucketNameOKBodyInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get API v1 b bucket name o k body info based on context it is used
func (o *GetAPIV1BBucketNameOKBodyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBodyInfo) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBodyInfo) UnmarshalBinary(b []byte) error {
	var res GetAPIV1BBucketNameOKBodyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetAPIV1BBucketNameOKBodySettings get API v1 b bucket name o k body settings
swagger:model GetAPIV1BBucketNameOKBodySettings
*/
type GetAPIV1BBucketNameOKBodySettings struct {

	// Max number of records in a block
	MaxBlockRecords int64 `json:"max_block_records,omitempty"`

	// Max block content_length in bytes
	MaxBlockSize int64 `json:"max_block_size,omitempty"`

	// Quota content_length in bytes
	QuotaSize int64 `json:"quota_size,omitempty"`

	// Quota type
	// Enum: ["NONE","FIFO"]
	QuotaType string `json:"quota_type,omitempty"`
}

// Validate validates this get API v1 b bucket name o k body settings
func (o *GetAPIV1BBucketNameOKBodySettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuotaType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getApiV1BBucketNameOKBodySettingsTypeQuotaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","FIFO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getApiV1BBucketNameOKBodySettingsTypeQuotaTypePropEnum = append(getApiV1BBucketNameOKBodySettingsTypeQuotaTypePropEnum, v)
	}
}

const (

	// GetAPIV1BBucketNameOKBodySettingsQuotaTypeNONE captures enum value "NONE"
	GetAPIV1BBucketNameOKBodySettingsQuotaTypeNONE string = "NONE"

	// GetAPIV1BBucketNameOKBodySettingsQuotaTypeFIFO captures enum value "FIFO"
	GetAPIV1BBucketNameOKBodySettingsQuotaTypeFIFO string = "FIFO"
)

// prop value enum
func (o *GetAPIV1BBucketNameOKBodySettings) validateQuotaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getApiV1BBucketNameOKBodySettingsTypeQuotaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetAPIV1BBucketNameOKBodySettings) validateQuotaType(formats strfmt.Registry) error {
	if swag.IsZero(o.QuotaType) { // not required
		return nil
	}

	// value enum
	if err := o.validateQuotaTypeEnum("getApiV1BBucketNameOK"+"."+"settings"+"."+"quota_type", "body", o.QuotaType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get API v1 b bucket name o k body settings based on context it is used
func (o *GetAPIV1BBucketNameOKBodySettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBodySettings) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAPIV1BBucketNameOKBodySettings) UnmarshalBinary(b []byte) error {
	var res GetAPIV1BBucketNameOKBodySettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
