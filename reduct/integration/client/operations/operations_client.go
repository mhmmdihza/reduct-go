// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operations API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operations API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlain sets the Accept header to "text/plain".
func WithAcceptTextPlain(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV1BBucketName(params *DeleteAPIV1BBucketNameParams, opts ...ClientOption) (*DeleteAPIV1BBucketNameOK, error)

	GetAPIV1BBucketName(params *GetAPIV1BBucketNameParams, opts ...ClientOption) (*GetAPIV1BBucketNameOK, error)

	GetAPIV1BBucketNameEntryName(params *GetAPIV1BBucketNameEntryNameParams, opts ...ClientOption) (*GetAPIV1BBucketNameEntryNameOK, *GetAPIV1BBucketNameEntryNameNoContent, error)

	GetAPIV1BBucketNameEntryNameBatch(params *GetAPIV1BBucketNameEntryNameBatchParams, opts ...ClientOption) (*GetAPIV1BBucketNameEntryNameBatchOK, *GetAPIV1BBucketNameEntryNameBatchNoContent, error)

	GetAPIV1BBucketNameEntryNameQ(params *GetAPIV1BBucketNameEntryNameQParams, opts ...ClientOption) (*GetAPIV1BBucketNameEntryNameQOK, error)

	HeadAPIV1BBucketName(params *HeadAPIV1BBucketNameParams, opts ...ClientOption) (*HeadAPIV1BBucketNameOK, error)

	PostAPIV1BBucketName(params *PostAPIV1BBucketNameParams, opts ...ClientOption) (*PostAPIV1BBucketNameOK, error)

	PostAPIV1BBucketNameEntryName(params *PostAPIV1BBucketNameEntryNameParams, opts ...ClientOption) (*PostAPIV1BBucketNameEntryNameOK, error)

	PostAPIV1BBucketNameEntryNameBatch(params *PostAPIV1BBucketNameEntryNameBatchParams, opts ...ClientOption) (*PostAPIV1BBucketNameEntryNameBatchOK, error)

	PutAPIV1BBucketName(params *PutAPIV1BBucketNameParams, opts ...ClientOption) (*PutAPIV1BBucketNameOK, error)

	PutAPIV1BBucketNameRename(params *PutAPIV1BBucketNameRenameParams, opts ...ClientOption) (*PutAPIV1BBucketNameRenameOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV1BBucketName removes a bucket
*/
func (a *Client) DeleteAPIV1BBucketName(params *DeleteAPIV1BBucketNameParams, opts ...ClientOption) (*DeleteAPIV1BBucketNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV1BBucketNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV1BBucketName",
		Method:             "DELETE",
		PathPattern:        "/api/v1/b/{bucket_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV1BBucketNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV1BBucketNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV1BBucketName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1BBucketName gets information about a bucket
*/
func (a *Client) GetAPIV1BBucketName(params *GetAPIV1BBucketNameParams, opts ...ClientOption) (*GetAPIV1BBucketNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1BBucketNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1BBucketName",
		Method:             "GET",
		PathPattern:        "/api/v1/b/{bucket_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1BBucketNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1BBucketNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1BBucketName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1BBucketNameEntryName gets a record from an entry
*/
func (a *Client) GetAPIV1BBucketNameEntryName(params *GetAPIV1BBucketNameEntryNameParams, opts ...ClientOption) (*GetAPIV1BBucketNameEntryNameOK, *GetAPIV1BBucketNameEntryNameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1BBucketNameEntryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1BBucketNameEntryName",
		Method:             "GET",
		PathPattern:        "/api/v1/b/{bucket_name}/{entry_name}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1BBucketNameEntryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAPIV1BBucketNameEntryNameOK:
		return value, nil, nil
	case *GetAPIV1BBucketNameEntryNameNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1BBucketNameEntryNameBatch gets a batch of records from an entry
*/
func (a *Client) GetAPIV1BBucketNameEntryNameBatch(params *GetAPIV1BBucketNameEntryNameBatchParams, opts ...ClientOption) (*GetAPIV1BBucketNameEntryNameBatchOK, *GetAPIV1BBucketNameEntryNameBatchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1BBucketNameEntryNameBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1BBucketNameEntryNameBatch",
		Method:             "GET",
		PathPattern:        "/api/v1/b/{bucket_name}/{entry_name}/batch",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1BBucketNameEntryNameBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAPIV1BBucketNameEntryNameBatchOK:
		return value, nil, nil
	case *GetAPIV1BBucketNameEntryNameBatchNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV1BBucketNameEntryNameQ queries records for a time interval

Deprecated since version 1.13. Use the Query API instead.
*/
func (a *Client) GetAPIV1BBucketNameEntryNameQ(params *GetAPIV1BBucketNameEntryNameQParams, opts ...ClientOption) (*GetAPIV1BBucketNameEntryNameQOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV1BBucketNameEntryNameQParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV1BBucketNameEntryNameQ",
		Method:             "GET",
		PathPattern:        "/api/v1/b/{bucket_name}/{entry_name}/q",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV1BBucketNameEntryNameQReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV1BBucketNameEntryNameQOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV1BBucketNameEntryNameQ: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV1BBucketName checks if a bucket exists
*/
func (a *Client) HeadAPIV1BBucketName(params *HeadAPIV1BBucketNameParams, opts ...ClientOption) (*HeadAPIV1BBucketNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV1BBucketNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV1BBucketName",
		Method:             "HEAD",
		PathPattern:        "/api/v1/b/{bucket_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV1BBucketNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV1BBucketNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV1BBucketName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1BBucketName creates a new bucket
*/
func (a *Client) PostAPIV1BBucketName(params *PostAPIV1BBucketNameParams, opts ...ClientOption) (*PostAPIV1BBucketNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1BBucketNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1BBucketName",
		Method:             "POST",
		PathPattern:        "/api/v1/b/{bucket_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1BBucketNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1BBucketNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1BBucketName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1BBucketNameEntryName writes a record to an entry

Write a single record to an entry. ReductStore creates an entry on the first write operation.
*/
func (a *Client) PostAPIV1BBucketNameEntryName(params *PostAPIV1BBucketNameEntryNameParams, opts ...ClientOption) (*PostAPIV1BBucketNameEntryNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1BBucketNameEntryNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1BBucketNameEntryName",
		Method:             "POST",
		PathPattern:        "/api/v1/b/{bucket_name}/{entry_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1BBucketNameEntryNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1BBucketNameEntryNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1BBucketNameEntryName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV1BBucketNameEntryNameBatch writes batch of records

Write multiple records to an entry using the Batch Protocol.
*/
func (a *Client) PostAPIV1BBucketNameEntryNameBatch(params *PostAPIV1BBucketNameEntryNameBatchParams, opts ...ClientOption) (*PostAPIV1BBucketNameEntryNameBatchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1BBucketNameEntryNameBatchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV1BBucketNameEntryNameBatch",
		Method:             "POST",
		PathPattern:        "/api/v1/b/{bucket_name}/{entry_name}/batch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1BBucketNameEntryNameBatchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1BBucketNameEntryNameBatchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1BBucketNameEntryNameBatch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV1BBucketName changes settings of a bucket
*/
func (a *Client) PutAPIV1BBucketName(params *PutAPIV1BBucketNameParams, opts ...ClientOption) (*PutAPIV1BBucketNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV1BBucketNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV1BBucketName",
		Method:             "PUT",
		PathPattern:        "/api/v1/b/{bucket_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV1BBucketNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV1BBucketNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV1BBucketName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV1BBucketNameRename renames a bucket
*/
func (a *Client) PutAPIV1BBucketNameRename(params *PutAPIV1BBucketNameRenameParams, opts ...ClientOption) (*PutAPIV1BBucketNameRenameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV1BBucketNameRenameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV1BBucketNameRename",
		Method:             "PUT",
		PathPattern:        "/api/v1/b/{bucket_name}/rename",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV1BBucketNameRenameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV1BBucketNameRenameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV1BBucketNameRename: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
