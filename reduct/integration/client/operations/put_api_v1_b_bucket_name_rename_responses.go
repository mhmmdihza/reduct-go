// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutAPIV1BBucketNameRenameReader is a Reader for the PutAPIV1BBucketNameRename structure.
type PutAPIV1BBucketNameRenameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutAPIV1BBucketNameRenameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutAPIV1BBucketNameRenameOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewPutAPIV1BBucketNameRenameUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutAPIV1BBucketNameRenameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutAPIV1BBucketNameRenameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewPutAPIV1BBucketNameRenameConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPutAPIV1BBucketNameRenameUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v1/b/{bucket_name}/rename] PutAPIV1BBucketNameRename", response, response.Code())
	}
}

// NewPutAPIV1BBucketNameRenameOK creates a PutAPIV1BBucketNameRenameOK with default headers values
func NewPutAPIV1BBucketNameRenameOK() *PutAPIV1BBucketNameRenameOK {
	return &PutAPIV1BBucketNameRenameOK{}
}

/*
PutAPIV1BBucketNameRenameOK describes a response with status code 200, with default header values.

The bucket is renamed
*/
type PutAPIV1BBucketNameRenameOK struct {
}

// IsSuccess returns true when this put Api v1 b bucket name rename o k response has a 2xx status code
func (o *PutAPIV1BBucketNameRenameOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put Api v1 b bucket name rename o k response has a 3xx status code
func (o *PutAPIV1BBucketNameRenameOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Api v1 b bucket name rename o k response has a 4xx status code
func (o *PutAPIV1BBucketNameRenameOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this put Api v1 b bucket name rename o k response has a 5xx status code
func (o *PutAPIV1BBucketNameRenameOK) IsServerError() bool {
	return false
}

// IsCode returns true when this put Api v1 b bucket name rename o k response a status code equal to that given
func (o *PutAPIV1BBucketNameRenameOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the put Api v1 b bucket name rename o k response
func (o *PutAPIV1BBucketNameRenameOK) Code() int {
	return 200
}

func (o *PutAPIV1BBucketNameRenameOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameOK", 200)
}

func (o *PutAPIV1BBucketNameRenameOK) String() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameOK", 200)
}

func (o *PutAPIV1BBucketNameRenameOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAPIV1BBucketNameRenameUnauthorized creates a PutAPIV1BBucketNameRenameUnauthorized with default headers values
func NewPutAPIV1BBucketNameRenameUnauthorized() *PutAPIV1BBucketNameRenameUnauthorized {
	return &PutAPIV1BBucketNameRenameUnauthorized{}
}

/*
PutAPIV1BBucketNameRenameUnauthorized describes a response with status code 401, with default header values.

Access token is invalid or empty
*/
type PutAPIV1BBucketNameRenameUnauthorized struct {
}

// IsSuccess returns true when this put Api v1 b bucket name rename unauthorized response has a 2xx status code
func (o *PutAPIV1BBucketNameRenameUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Api v1 b bucket name rename unauthorized response has a 3xx status code
func (o *PutAPIV1BBucketNameRenameUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Api v1 b bucket name rename unauthorized response has a 4xx status code
func (o *PutAPIV1BBucketNameRenameUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Api v1 b bucket name rename unauthorized response has a 5xx status code
func (o *PutAPIV1BBucketNameRenameUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this put Api v1 b bucket name rename unauthorized response a status code equal to that given
func (o *PutAPIV1BBucketNameRenameUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the put Api v1 b bucket name rename unauthorized response
func (o *PutAPIV1BBucketNameRenameUnauthorized) Code() int {
	return 401
}

func (o *PutAPIV1BBucketNameRenameUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameUnauthorized", 401)
}

func (o *PutAPIV1BBucketNameRenameUnauthorized) String() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameUnauthorized", 401)
}

func (o *PutAPIV1BBucketNameRenameUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAPIV1BBucketNameRenameForbidden creates a PutAPIV1BBucketNameRenameForbidden with default headers values
func NewPutAPIV1BBucketNameRenameForbidden() *PutAPIV1BBucketNameRenameForbidden {
	return &PutAPIV1BBucketNameRenameForbidden{}
}

/*
PutAPIV1BBucketNameRenameForbidden describes a response with status code 403, with default header values.

Access token doesn't have enough permissions
*/
type PutAPIV1BBucketNameRenameForbidden struct {
}

// IsSuccess returns true when this put Api v1 b bucket name rename forbidden response has a 2xx status code
func (o *PutAPIV1BBucketNameRenameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Api v1 b bucket name rename forbidden response has a 3xx status code
func (o *PutAPIV1BBucketNameRenameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Api v1 b bucket name rename forbidden response has a 4xx status code
func (o *PutAPIV1BBucketNameRenameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Api v1 b bucket name rename forbidden response has a 5xx status code
func (o *PutAPIV1BBucketNameRenameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this put Api v1 b bucket name rename forbidden response a status code equal to that given
func (o *PutAPIV1BBucketNameRenameForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the put Api v1 b bucket name rename forbidden response
func (o *PutAPIV1BBucketNameRenameForbidden) Code() int {
	return 403
}

func (o *PutAPIV1BBucketNameRenameForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameForbidden", 403)
}

func (o *PutAPIV1BBucketNameRenameForbidden) String() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameForbidden", 403)
}

func (o *PutAPIV1BBucketNameRenameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAPIV1BBucketNameRenameNotFound creates a PutAPIV1BBucketNameRenameNotFound with default headers values
func NewPutAPIV1BBucketNameRenameNotFound() *PutAPIV1BBucketNameRenameNotFound {
	return &PutAPIV1BBucketNameRenameNotFound{}
}

/*
PutAPIV1BBucketNameRenameNotFound describes a response with status code 404, with default header values.

Bucket doesn't exist
*/
type PutAPIV1BBucketNameRenameNotFound struct {
}

// IsSuccess returns true when this put Api v1 b bucket name rename not found response has a 2xx status code
func (o *PutAPIV1BBucketNameRenameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Api v1 b bucket name rename not found response has a 3xx status code
func (o *PutAPIV1BBucketNameRenameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Api v1 b bucket name rename not found response has a 4xx status code
func (o *PutAPIV1BBucketNameRenameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Api v1 b bucket name rename not found response has a 5xx status code
func (o *PutAPIV1BBucketNameRenameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this put Api v1 b bucket name rename not found response a status code equal to that given
func (o *PutAPIV1BBucketNameRenameNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the put Api v1 b bucket name rename not found response
func (o *PutAPIV1BBucketNameRenameNotFound) Code() int {
	return 404
}

func (o *PutAPIV1BBucketNameRenameNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameNotFound", 404)
}

func (o *PutAPIV1BBucketNameRenameNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameNotFound", 404)
}

func (o *PutAPIV1BBucketNameRenameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAPIV1BBucketNameRenameConflict creates a PutAPIV1BBucketNameRenameConflict with default headers values
func NewPutAPIV1BBucketNameRenameConflict() *PutAPIV1BBucketNameRenameConflict {
	return &PutAPIV1BBucketNameRenameConflict{}
}

/*
PutAPIV1BBucketNameRenameConflict describes a response with status code 409, with default header values.

Bucket with the new name already exists
*/
type PutAPIV1BBucketNameRenameConflict struct {
}

// IsSuccess returns true when this put Api v1 b bucket name rename conflict response has a 2xx status code
func (o *PutAPIV1BBucketNameRenameConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Api v1 b bucket name rename conflict response has a 3xx status code
func (o *PutAPIV1BBucketNameRenameConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Api v1 b bucket name rename conflict response has a 4xx status code
func (o *PutAPIV1BBucketNameRenameConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Api v1 b bucket name rename conflict response has a 5xx status code
func (o *PutAPIV1BBucketNameRenameConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this put Api v1 b bucket name rename conflict response a status code equal to that given
func (o *PutAPIV1BBucketNameRenameConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the put Api v1 b bucket name rename conflict response
func (o *PutAPIV1BBucketNameRenameConflict) Code() int {
	return 409
}

func (o *PutAPIV1BBucketNameRenameConflict) Error() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameConflict", 409)
}

func (o *PutAPIV1BBucketNameRenameConflict) String() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameConflict", 409)
}

func (o *PutAPIV1BBucketNameRenameConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutAPIV1BBucketNameRenameUnprocessableEntity creates a PutAPIV1BBucketNameRenameUnprocessableEntity with default headers values
func NewPutAPIV1BBucketNameRenameUnprocessableEntity() *PutAPIV1BBucketNameRenameUnprocessableEntity {
	return &PutAPIV1BBucketNameRenameUnprocessableEntity{}
}

/*
PutAPIV1BBucketNameRenameUnprocessableEntity describes a response with status code 422, with default header values.

JSON request is invalid
*/
type PutAPIV1BBucketNameRenameUnprocessableEntity struct {
}

// IsSuccess returns true when this put Api v1 b bucket name rename unprocessable entity response has a 2xx status code
func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this put Api v1 b bucket name rename unprocessable entity response has a 3xx status code
func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put Api v1 b bucket name rename unprocessable entity response has a 4xx status code
func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this put Api v1 b bucket name rename unprocessable entity response has a 5xx status code
func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this put Api v1 b bucket name rename unprocessable entity response a status code equal to that given
func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the put Api v1 b bucket name rename unprocessable entity response
func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) Code() int {
	return 422
}

func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameUnprocessableEntity", 422)
}

func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/v1/b/{bucket_name}/rename][%d] putApiV1BBucketNameRenameUnprocessableEntity", 422)
}

func (o *PutAPIV1BBucketNameRenameUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PutAPIV1BBucketNameRenameBody put API v1 b bucket name rename body
swagger:model PutAPIV1BBucketNameRenameBody
*/
type PutAPIV1BBucketNameRenameBody struct {

	// New name of the bucket
	NewName string `json:"new_name,omitempty"`
}

// Validate validates this put API v1 b bucket name rename body
func (o *PutAPIV1BBucketNameRenameBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put API v1 b bucket name rename body based on context it is used
func (o *PutAPIV1BBucketNameRenameBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutAPIV1BBucketNameRenameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutAPIV1BBucketNameRenameBody) UnmarshalBinary(b []byte) error {
	var res PutAPIV1BBucketNameRenameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
